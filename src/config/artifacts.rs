use std::str::FromStr;

use serde::{Deserialize, Serialize};

pub const ARTIFACTS_FILE: &'static str = "artifacts.toml";

#[derive(Serialize, Deserialize, Default, Debug, PartialEq, Clone)]
pub struct Config {
    pub sources: Vec<SourceConfig>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub enum SourceType {
    Gitlab,
}

impl FromStr for SourceType {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "gitlab" => Ok(SourceType::Gitlab),
            _ => Err(()),
        }
    }
}

/// A location that artifacts can be pulled from
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct SourceConfig {
    /// Human readable id of the account
    pub id: String,
    /// What kind of account it is.
    pub kind: SourceType,
    /// The main URL of the source.
    pub url: String,
    /// All artifacts that can be obtained from this source
    pub artifacts: Vec<ArtifactConfig>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct ArtifactConfig {
    /// The human readable id of this artifact
    pub id: String,
    /// The project that this artifact can be retrieved from
    pub project_id: String,
    /// The branch to retrieve the artifact from
    pub branch: String,
    /// The pattern in order to distiguish the artifact
    /// from other artifacts generated by both this project
    /// and other projects:
    ///
    /// Example: craftbook-extra
    pub artifact_pattern: String,
}

#[cfg(test)]
mod test {
    use super::*;

    const BASIC_CONFIG: &str = r#"
    [[sources]]
    name = "gitlab/tyhdefu"
    kind = "Gitlab"
    url = "https://gitlab.com"

    [[sources.artifacts]]
    name = "Project1"
    project_id = "project-1"
    branch = "master"
    artifact_pattern = "*.jar"
    "#;

    #[test]
    fn test_deserialize() {
        let config: Config = toml::from_str(BASIC_CONFIG).expect("Failed to deserialize config");

        let expected_config = Config {
            sources: vec![SourceConfig {
                id: "gitlab/tyhdefu".into(),
                kind: SourceType::Gitlab,
                url: "https://gitlab.com".into(),
                artifacts: vec![ArtifactConfig {
                    id: "Project1".into(),
                    project_id: "project-1".into(),
                    branch: "master".into(),
                    artifact_pattern: "*.jar".into(),
                }],
            }],
        };
        assert_eq!(config, expected_config);
    }
}
